This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-11T15:50:44.040Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    api/
      chat/
        route.ts
      pdf/
        route.ts
    chat/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
    providers.tsx
  components/
    tools/
      BenefitTool.tsx
      ConfirmationTool.tsx
      ListTool.tsx
      PDFProcessingTool.tsx
    ui/
      button.tsx
      card.tsx
      dropdown-menu.tsx
      input.tsx
      scroll-area.tsx
    chat-input.tsx
    chat-message.tsx
    header.tsx
    mode-toggle.tsx
    theme-toggle.tsx
    ToolInvocationDisplay.tsx
  lib/
    actions/
      resources.ts
    ai/
      embedding.ts
    db/
      migrations/
        meta/
          _journal.json
          0000_snapshot.json
        0000_yielding_bloodaxe.sql
      schema/
        embeddings.ts
        resources.ts
      actions.ts
      index.ts
      migrate.ts
    env.mjs
    utils.ts
  types/
    tools.ts
  utils/
    toolRegistry.ts
.gitattributes
.gitignore
components.json
drizzle.config.ts
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/api/chat/route.ts
================
import { createResource } from "@/lib/actions/resources";
import { findRelevantContent } from "@/lib/ai/embedding";
import { NewResourceParams } from "@/lib/db/schema/resources";
import { openai } from "@ai-sdk/openai";
import { streamText, tool } from "ai";
import { z } from "zod";

export async function POST(request: Request) {
	const { messages } = await request.json();

	const result = streamText({
		model: openai("gpt-4o"),
		system: `You are a helpful assistant that can provide information about benefits and also check the knowledge base.

When users ask about benefits or employee perks:
1. Use the getBenefits tool to show available benefits
2. You can filter benefits by category if the user asks for specific types

For all other questions:
1. Use the getInformation tool to check the knowledge base
2. If relevant information is found, use ONLY that information to answer
3. If no relevant information is found, respond with "Sorry, I don't know."

Example benefit queries:
- "What benefits do you offer?" -> Use getBenefits with no category
- "Tell me about health benefits" -> Use getBenefits with category "health"
- "Show insurance options" -> Use getBenefits with category "insurance"`,
		messages,
		tools: {
			addResource: tool({
				description: `add a resource to your knowledge base.
          If the user provides a random piece of knowledge unprompted, use this tool without asking for confirmation.`,
				parameters: z.object({
					content: z
						.string()
						.describe("the content or resource to add to the knowledge base"),
				}),
				execute: async ({ content }) => createResource({ content }),
			}),
			getInformation: tool({
				description: `get information from your knowledge base to answer questions.`,
				parameters: z.object({
					question: z.string().describe("the users question"),
				}),
				execute: async ({ question }) => findRelevantContent(question),
			}),
			getBenefits: tool({
				description: `Get a list of employee benefits to display to the user.`,
				parameters: z.object({
					benefits: z
						.array(
							z.object({
								category: z
									.string()
									.describe("optional category of benefits to filter by"),
								description: z
									.string()
									.describe("optional description of benefit shown"),
							})
						)
						.max(5),
				}),
				execute: async ({ benefits }) => {
					return benefits;
				},
			}),
		},
	});

	return result.toDataStreamResponse();
}

================
File: src/app/api/pdf/route.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextRequest, NextResponse } from "next/server";
import { promises as fs } from "fs";
import { v4 as uuidv4 } from "uuid";
import PDFParser from "pdf2json";
import { generateEmbeddings } from "@/lib/ai/embedding";
import { db } from "@/lib/db";
import { embeddings } from "@/lib/db/schema/embeddings";

export async function POST(req: NextRequest) {
	const formData: FormData = await req.formData();
	console.log("Form data entries:", Array.from(formData.entries()));
	const uploadedFiles = formData.getAll("filepond");
	let fileName = "";
	let parsedText = "";

	if (!uploadedFiles || uploadedFiles.length === 0) {
		console.log("No files found in the request.");
		return new NextResponse("No files found in the request", { status: 400 });
	}

	const uploadedFile = uploadedFiles[0];
	console.log("Uploaded file:", uploadedFile);

	if (!uploadedFile || !(uploadedFile instanceof File)) {
		console.log("Invalid file format or no file provided");
		return new NextResponse("Invalid file format or no file provided", {
			status: 400,
		});
	}

	// Generate a unique filename
	fileName = uuidv4();
	const tempFilePath = `/tmp/${fileName}.pdf`;
	const fileBuffer = Buffer.from(await uploadedFile.arrayBuffer());
	await fs.writeFile(tempFilePath, fileBuffer);

	const pdfParser = new (PDFParser as any)(null, 1);

	try {
		// Convert the PDF parsing to a Promise
		parsedText = await new Promise((resolve, reject) => {
			pdfParser.on("pdfParser_dataError", (errData: any) =>
				reject(errData.parserError)
			);
			pdfParser.on("pdfParser_dataReady", () => {
				resolve((pdfParser as any).getRawTextContent());
			});
			pdfParser.loadPDF(tempFilePath);
		});

		// Generate embeddings from the parsed text
		const embeddingsData = await generateEmbeddings(parsedText);

		// Store embeddings in the database
		await db.insert(embeddings).values(
			embeddingsData.map((data) => ({
				content: data.content,
				embedding: data.embedding,
				source: `pdf:${fileName}`,
			}))
		);

		// Clean up the temporary file
		await fs.unlink(tempFilePath);
	} catch (error) {
		console.error("Error processing PDF:", error);
		return new NextResponse("Error processing PDF", { status: 500 });
	}

	const response = new NextResponse(parsedText);
	response.headers.set("FileName", fileName);
	return response;
}

================
File: src/app/chat/page.tsx
================
"use client";

import { Message, useChat } from "ai/react";
import { ToolInvocation } from "ai";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Header } from "@/components/header";
import { ChatInput } from "@/components/chat-input";
import { ChatMessage } from "@/components/chat-message";
import { useState, useEffect } from "react";

export default function Chat() {
	const { messages, input, handleInputChange, handleSubmit, addToolResult } =
		useChat({
			api: "/api/chat",
			maxSteps: 5,
		});

	// Filter out empty AI messages and messages without meaningful content
	const filteredMessages = messages.filter((m) => {
		if (m.role === "user") return true;
		if (m.role === "assistant") {
			if (m.content.trim() !== "") return true;
			if (m.toolInvocations?.[0]) {
				const tool = m.toolInvocations[0];
				return tool.toolName === "askForConfirmation" || "result" in tool;
			}
		}
		return false;
	});

	return (
		<div className="flex flex-col h-screen bg-background">
			<Header />
			<main className="flex-1 overflow-hidden">
				<ScrollArea className="h-full">
					<div className="max-w-3xl mx-auto pt-4 pb-20">
						{filteredMessages.map((message: Message) => (
							<ChatMessage
								key={message.id}
								message={message}
								addToolResult={addToolResult}
							/>
						))}
					</div>
				</ScrollArea>
			</main>
			<ChatInput
				input={input}
				handleInputChange={handleInputChange}
				handleSubmit={handleSubmit}
			/>
		</div>
	);
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
	font-family: Arial, Helvetica, sans-serif;
}

@layer base {
	:root {
		--background: 0 0% 100%;
		--foreground: 0 0% 3.9%;
		--card: 0 0% 100%;
		--card-foreground: 0 0% 3.9%;
		--popover: 0 0% 100%;
		--popover-foreground: 0 0% 3.9%;
		--primary: 0 0% 9%;
		--primary-foreground: 0 0% 98%;
		--secondary: 0 0% 96.1%;
		--secondary-foreground: 0 0% 9%;
		--muted: 0 0% 96.1%;
		--muted-foreground: 0 0% 45.1%;
		--accent: 0 0% 96.1%;
		--accent-foreground: 0 0% 9%;
		--destructive: 0 84.2% 60.2%;
		--destructive-foreground: 0 0% 98%;
		--border: 0 0% 89.8%;
		--input: 0 0% 89.8%;
		--ring: 0 0% 3.9%;
		--chart-1: 12 76% 61%;
		--chart-2: 173 58% 39%;
		--chart-3: 197 37% 24%;
		--chart-4: 43 74% 66%;
		--chart-5: 27 87% 67%;
		--radius: 0.5rem;
	}
	.dark {
		--background: 0 0% 3.9%;
		--foreground: 0 0% 98%;
		--card: 0 0% 3.9%;
		--card-foreground: 0 0% 98%;
		--popover: 0 0% 3.9%;
		--popover-foreground: 0 0% 98%;
		--primary: 0 0% 98%;
		--primary-foreground: 0 0% 9%;
		--secondary: 0 0% 14.9%;
		--secondary-foreground: 0 0% 98%;
		--muted: 0 0% 14.9%;
		--muted-foreground: 0 0% 63.9%;
		--accent: 0 0% 14.9%;
		--accent-foreground: 0 0% 98%;
		--destructive: 0 62.8% 30.6%;
		--destructive-foreground: 0 0% 98%;
		--border: 0 0% 14.9%;
		--input: 0 0% 14.9%;
		--ring: 0 0% 83.1%;
		--chart-1: 220 70% 50%;
		--chart-2: 160 60% 45%;
		--chart-3: 30 80% 55%;
		--chart-4: 280 65% 60%;
		--chart-5: 340 75% 55%;
	}
}

@layer base {
	* {
		@apply border-border;
	}
	body {
		@apply bg-background text-foreground;
	}
}

@keyframes progress {
	0% {
		width: 0%;
	}
	50% {
		width: 100%;
	}
	100% {
		width: 0%;
	}
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "./providers";

const geistSans = Geist({
	variable: "--font-geist-sans",
	subsets: ["latin"],
});

const geistMono = Geist_Mono({
	variable: "--font-geist-mono",
	subsets: ["latin"],
});

export const metadata: Metadata = {
	title: "Create Next App",
	description: "Generated by create next app",
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang="en" suppressHydrationWarning>
			<body
				className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen`}
			>
				<ThemeProvider
					attribute="class"
					defaultTheme="system"
					enableSystem
					disableTransitionOnChange
				>
					{children}
				</ThemeProvider>
			</body>
		</html>
	);
}

================
File: src/app/page.tsx
================
"use client";

import { useChat } from "ai/react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { ChatMessage } from "@/components/chat-message";
import { ChatInput } from "@/components/chat-input";
import { Header } from "@/components/header";
export default function Chat() {
	const { messages, input, handleInputChange, handleSubmit } = useChat({
		maxSteps: 3,
		onFinish: async (message) => {
			console.log("onFinish", message);
		},
	});

	return (
		<div className="flex flex-col h-[calc(100vh-4rem)]">
			<Header />
			<ScrollArea className="flex-1 p-4">
				<div className="space-y-4 max-w-3xl mx-auto">
					{messages.map((message) => (
						<ChatMessage
							key={message.id}
							message={message}
							addToolResult={({ toolCallId, result }) => {
								// Handle tool results if needed
								console.log("Tool result:", { toolCallId, result });
							}}
						/>
					))}
				</div>
			</ScrollArea>

			<ChatInput
				input={input}
				handleInputChange={handleInputChange}
				handleSubmit={() => {
					handleSubmit(new Event("submit"));
				}}
			/>
		</div>
	);
}

================
File: src/app/providers.tsx
================
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { ThemeProviderProps } from "next-themes";
import { Toaster } from "sonner";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
	return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}

export function Providers({ children }: { children: React.ReactNode }) {
	return (
		<ThemeProvider
			attribute="class"
			defaultTheme="system"
			enableSystem
			disableTransitionOnChange
		>
			{children}
			<Toaster />
		</ThemeProvider>
	);
}

================
File: src/components/tools/BenefitTool.tsx
================
import { BaseToolProps } from "@/types/tools";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { motion } from "framer-motion";
import { Heart, Umbrella, Palmtree, Stethoscope, Activity } from "lucide-react";

interface BenefitToolParameters {
	category?: string;
	description?: string;
}

interface Benefit {
	title: string;
	description: string;
	icon: string;
	category?: string;
}

const iconMap: Record<string, React.ElementType> = {
	heart: Heart,
	umbrella: Umbrella,
	palmtree: Palmtree,
	medical: Stethoscope,
	activity: Activity,
};

export function BenefitTool({
	toolInvocation,
}: BaseToolProps<BenefitToolParameters>) {
	if (!("result" in toolInvocation)) {
		return (
			<Card>
				<CardHeader>
					<CardTitle>Loading Benefits...</CardTitle>
				</CardHeader>
				<CardContent>
					<div className="flex items-center gap-2">
						<div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" />
						<p className="text-sm text-muted-foreground">
							Processing benefits...
						</p>
					</div>
				</CardContent>
			</Card>
		);
	}

	const benefits: Benefit[] = JSON.parse(toolInvocation.result);
	const { category, description } = toolInvocation.parameters || {};

	const filteredBenefits = benefits.filter((benefit) => {
		if (category && benefit.category !== category) return false;
		if (
			description &&
			!benefit.description.toLowerCase().includes(description.toLowerCase())
		)
			return false;
		return true;
	});

	return (
		<motion.div
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			exit={{ opacity: 0, y: -20 }}
			transition={{ duration: 0.2 }}
			className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3"
		>
			{filteredBenefits.map((benefit, index) => {
				const IconComponent = iconMap[benefit.icon.toLowerCase()] || Activity;

				return (
					<Card key={index} className="overflow-hidden">
						<CardContent className="p-6">
							<div className="flex flex-col items-center text-center gap-4">
								<div className="flex h-12 w-12 items-center justify-center rounded-full bg-primary/10">
									<IconComponent className="h-6 w-6 text-primary" />
								</div>
								<div className="space-y-1">
									<h4 className="text-sm font-medium leading-none">
										{benefit.title}
									</h4>
									<p className="text-sm text-muted-foreground">
										{benefit.description}
									</p>
									{benefit.category && (
										<span className="inline-block px-2 py-1 mt-2 text-xs font-medium text-primary bg-primary/10 rounded-full">
											{benefit.category}
										</span>
									)}
								</div>
							</div>
						</CardContent>
					</Card>
				);
			})}
		</motion.div>
	);
}

================
File: src/components/tools/ConfirmationTool.tsx
================
import { BaseToolProps } from "@/types/tools";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export function ConfirmationTool({
	toolInvocation,
	addToolResult,
}: BaseToolProps) {
	const toolCallId = toolInvocation.toolCallId;

	if ("result" in toolInvocation) {
		return (
			<Card>
				<CardHeader>
					<CardTitle>Confirmation Result</CardTitle>
				</CardHeader>
				<CardContent>
					<p className="font-bold">{toolInvocation.result}</p>
				</CardContent>
			</Card>
		);
	}

	return (
		<Card>
			<CardHeader>
				<CardTitle>Confirmation Required</CardTitle>
			</CardHeader>
			<CardContent>
				<p className="mb-4">{toolInvocation.args.message}</p>
				<div className="flex gap-2">
					<Button
						onClick={() =>
							addToolResult({
								toolCallId,
								result: "Yes, confirmed.",
							})
						}
					>
						Yes
					</Button>
					<Button
						variant="destructive"
						onClick={() =>
							addToolResult({
								toolCallId,
								result: "No, denied.",
							})
						}
					>
						No
					</Button>
				</div>
			</CardContent>
		</Card>
	);
}

================
File: src/components/tools/ListTool.tsx
================
import { BaseToolProps } from "@/types/tools";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { motion } from "framer-motion";

interface ListItem {
	title: string;
	description: string;
}

export function ListTool({ toolInvocation }: BaseToolProps) {
	if (!("result" in toolInvocation)) {
		return (
			<Card>
				<CardHeader>
					<CardTitle>Loading List...</CardTitle>
				</CardHeader>
				<CardContent>
					<div className="flex items-center gap-2">
						<div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" />
						<p className="text-sm text-muted-foreground">
							Processing list items...
						</p>
					</div>
				</CardContent>
			</Card>
		);
	}

	const items: ListItem[] = JSON.parse(toolInvocation.result);

	return (
		<motion.div
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			exit={{ opacity: 0, y: -20 }}
			transition={{ duration: 0.2 }}
			className="grid gap-4"
		>
			{items.map((item, index) => (
				<Card key={index} className="overflow-hidden">
					<CardContent className="p-6">
						<div className="flex items-start gap-4">
							<div className="flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-primary text-primary-foreground">
								{index + 1}
							</div>
							<div className="space-y-1">
								<h4 className="text-sm font-medium leading-none">
									{item.title}
								</h4>
								<p className="text-sm text-muted-foreground">
									{item.description}
								</p>
							</div>
						</div>
					</CardContent>
				</Card>
			))}
		</motion.div>
	);
}

================
File: src/components/tools/PDFProcessingTool.tsx
================
import { BaseToolProps } from "@/types/tools";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { motion } from "framer-motion";

export function PDFProcessingTool({ toolInvocation }: BaseToolProps) {
	return (
		<motion.div
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			exit={{ opacity: 0, y: -20 }}
			transition={{ duration: 0.2 }}
		>
			<Card>
				<CardHeader>
					<CardTitle>Processing PDF</CardTitle>
				</CardHeader>
				<CardContent>
					{"result" in toolInvocation ? (
						<p className="text-sm text-muted-foreground">
							{toolInvocation.result}
						</p>
					) : (
						<div className="flex flex-col gap-4">
							<div className="flex items-center gap-2">
								<div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" />
								<p className="text-sm text-muted-foreground">
									Processing PDF and generating embeddings...
								</p>
							</div>
							<div className="h-1 w-full bg-secondary overflow-hidden rounded-full">
								<div className="h-full bg-primary animate-[progress_2s_ease-in-out_infinite]" />
							</div>
						</div>
					)}
				</CardContent>
			</Card>
		</motion.div>
	);
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: src/components/chat-input.tsx
================
"use client";

import { PaperclipIcon, SendIcon } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

import { useRef, useState } from "react";
import { toast } from "sonner";

interface ChatInputProps {
	input: string;
	handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
	handleSubmit: () => void;
}

export function ChatInput({
	input,
	handleInputChange,
	handleSubmit,
}: ChatInputProps) {
	const fileInputRef = useRef<HTMLInputElement>(null);
	const [isUploading, setIsUploading] = useState(false);

	const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
		const file = e.target.files?.[0];
		if (!file) return;

		// Check if file is PDF
		if (file.type !== "application/pdf") {
			toast.error("Please upload a PDF file");
			return;
		}

		setIsUploading(true);

		try {
			const formData = new FormData();
			formData.append("filepond", file);

			const response = await fetch("/api/pdf", {
				method: "POST",
				body: formData,
			});

			if (!response.ok) {
				throw new Error("Failed to process PDF");
			}

			const fileName = response.headers.get("FileName");

			toast.success("PDF processed successfully");

			// You can handle the parsed text here
			// For example, you could set it as the input value
			handleInputChange({
				target: {
					value: `I've uploaded a PDF file named ${fileName}. Please help me analyze its contents.`,
				},
			} as React.ChangeEvent<HTMLInputElement>);

			// Automatically submit after processing
			handleSubmit();
		} catch (error) {
			console.error("Error processing PDF:", error);
			toast.error("Failed to process PDF file");
		} finally {
			setIsUploading(false);
			// Reset file input
			if (fileInputRef.current) {
				fileInputRef.current.value = "";
			}
		}
	};

	return (
		<div className="w-[800px] max-sm:w-full mx-auto sticky bottom-0 bg-gradient-to-t from-background via-background/80 to-background/40 p-4 backdrop-blur-xl">
			<form
				onSubmit={(e) => {
					e.preventDefault();
					handleSubmit();
				}}
				className="flex gap-2 items-center"
			>
				<input
					type="file"
					accept=".pdf"
					onChange={handleFileUpload}
					ref={fileInputRef}
					className="hidden"
				/>
				<Button
					type="button"
					size="icon"
					variant="ghost"
					onClick={() => fileInputRef.current?.click()}
					disabled={isUploading}
				>
					<PaperclipIcon
						className={`h-5 w-5 ${isUploading ? "animate-spin" : ""}`}
					/>
				</Button>
				<Input
					value={input}
					onChange={handleInputChange}
					placeholder="Ask a question..."
					className="flex-1 "
				/>
				<Button
					type="submit"
					size="icon"
					disabled={!input.trim() || isUploading}
				>
					<SendIcon className="h-5 w-5" />
				</Button>
			</form>
		</div>
	);
}

================
File: src/components/chat-message.tsx
================
import { Message } from "ai";
import { Card, CardContent } from "@/components/ui/card";
import Image from "next/image";
import { User } from "lucide-react";
import { cn } from "@/lib/utils";
import ToolInvocationDisplay from "./ToolInvocationDisplay";
import { ToolName } from "@/utils/toolRegistry";
import { Wrench } from "lucide-react";

interface ChatMessageProps {
	message: Message & {
		function_call?: {
			name: string;
			arguments: string;
		};
	};
	addToolResult: (result: { toolCallId: string; result: string }) => void;
}

export function ChatMessage({ message, addToolResult }: ChatMessageProps) {
	const isAI = message.role === "assistant";
	const functionCall = message.function_call;
	const messageContent = message.content;
	const isToolCall = Boolean(functionCall);
	const isToolResult = message.content?.length === 0;

	return (
		<Card
			className={cn(
				"mb-4 border-0 shadow-none max-w-3xl mx-auto",
				isAI ? "bg-muted/50" : "bg-background"
			)}
		>
			<CardContent className="p-4">
				<div className="flex items-start gap-4">
					<div className="rounded-full bg-primary/10 p-2 w-10 h-10 flex items-center justify-center">
						{isAI ? (
							<Image
								src="/nationwide.png"
								alt="Nationwide AI"
								width={24}
								height={24}
								className="w-6 h-6"
							/>
						) : (
							<User className="w-6 h-6" />
						)}
					</div>
					<div className="flex-1">
						<div className="flex items-center gap-2">
							<span className="font-semibold">
								{isAI ? "Nationwide AI" : "You"}
							</span>
							{isToolCall && functionCall && (
								<span className="flex items-center gap-1 text-xs text-muted-foreground">
									<Wrench className="w-3 h-3" />
									Using tool: {functionCall.name}
								</span>
							)}
						</div>

						{messageContent && (
							<div className="text-sm mb-3">{messageContent}</div>
						)}

						{isToolResult && (
							<div className="space-y-3">
								<ToolInvocationDisplay
									toolInvocation={{
										state: "call",
										toolName: message?.toolInvocations?.[0]
											.toolName as ToolName,
										toolCallId: message.id,
										args: message?.toolInvocations?.[0].args,
									}}
									addToolResult={addToolResult}
								/>
							</div>
						)}
					</div>
				</div>
			</CardContent>
		</Card>
	);
}

================
File: src/components/header.tsx
================
import Image from "next/image";
import { ModeToggle } from "./mode-toggle";

export function Header() {
	return (
		<header className=" container mx-auto sticky top-0 z-50 flex items-center justify-between h-16 px-4 border-b shrink-0 bg-gradient-to-b from-background/10 via-background/50 to-background/80 backdrop-blur-xl">
			<div className="flex items-center gap-2">
				<Image
					src="/nationwide.png"
					alt="Nationwide Logo"
					width={24}
					height={24}
					className="w-6 h-6"
				/>
				<h1 className="font-semibold">Nationwide GPT</h1>
			</div>
			<ModeToggle />
		</header>
	);
}

================
File: src/components/mode-toggle.tsx
================
"use client";

import * as React from "react";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";

import { Button } from "@/components/ui/button";
import {
	DropdownMenu,
	DropdownMenuContent,
	DropdownMenuItem,
	DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export function ModeToggle() {
	const { setTheme } = useTheme();

	return (
		<DropdownMenu>
			<DropdownMenuTrigger asChild>
				<Button variant="outline" size="icon">
					<Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
					<Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
					<span className="sr-only">Toggle theme</span>
				</Button>
			</DropdownMenuTrigger>
			<DropdownMenuContent align="end">
				<DropdownMenuItem onClick={() => setTheme("light")}>
					Light
				</DropdownMenuItem>
				<DropdownMenuItem onClick={() => setTheme("dark")}>
					Dark
				</DropdownMenuItem>
				<DropdownMenuItem onClick={() => setTheme("system")}>
					System
				</DropdownMenuItem>
			</DropdownMenuContent>
		</DropdownMenu>
	);
}

================
File: src/components/theme-toggle.tsx
================
"use client";

import * as React from "react";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";

import { Button } from "@/components/ui/button";
import {
	DropdownMenu,
	DropdownMenuContent,
	DropdownMenuItem,
	DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export function ThemeToggle() {
	const { setTheme } = useTheme();

	return (
		<DropdownMenu>
			<DropdownMenuTrigger asChild>
				<Button variant="outline" size="icon">
					<Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
					<Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
					<span className="sr-only">Toggle theme</span>
				</Button>
			</DropdownMenuTrigger>
			<DropdownMenuContent align="end">
				<DropdownMenuItem onClick={() => setTheme("light")}>
					Light
				</DropdownMenuItem>
				<DropdownMenuItem onClick={() => setTheme("dark")}>
					Dark
				</DropdownMenuItem>
				<DropdownMenuItem onClick={() => setTheme("system")}>
					System
				</DropdownMenuItem>
			</DropdownMenuContent>
		</DropdownMenu>
	);
}

================
File: src/components/ToolInvocationDisplay.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { ToolInvocation } from "ai";
import { BaseToolProps } from "@/types/tools";
import { toolComponents, ToolName } from "@/utils/toolRegistry";
import { Card, CardContent } from "@/components/ui/card";
import { motion } from "framer-motion";

interface ToolInvocationDisplayProps {
	toolInvocation: ToolInvocation | null;
	addToolResult: (result: { toolCallId: string; result: string }) => void;
}

const animations = {
	initial: { opacity: 0, y: 20 },
	animate: { opacity: 1, y: 0 },
	exit: { opacity: 0, y: -20 },
	transition: { duration: 0.2 },
};

function FallbackComponent({ toolInvocation }: BaseToolProps) {
	return (
		<motion.div {...animations}>
			<Card className="max-w-fit">
				<CardContent className="flex items-center gap-2 p-3">
					<span className="text-sm font-medium text-muted-foreground">
						{toolInvocation.toolName}:
					</span>
					{"result" in toolInvocation ? (
						<span className="text-sm">{toolInvocation.result}</span>
					) : (
						<div className="flex items-center gap-1.5">
							<div className="w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse" />
							<span className="text-sm text-muted-foreground">Processing</span>
						</div>
					)}
				</CardContent>
			</Card>
		</motion.div>
	);
}

export default function ToolInvocationDisplay({
	toolInvocation,
	addToolResult,
}: ToolInvocationDisplayProps) {
	if (!toolInvocation) return null;

	const toolName = toolInvocation.toolName as ToolName;
	const ToolComponent = toolComponents[toolName];

	if (ToolComponent) {
		return (
			<motion.div {...animations}>
				<ToolComponent
					toolInvocation={toolInvocation as any}
					addToolResult={addToolResult}
				/>
			</motion.div>
		);
	}

	return (
		<FallbackComponent
			toolInvocation={toolInvocation as any}
			addToolResult={addToolResult}
		/>
	);
}

================
File: src/lib/actions/resources.ts
================
"use server";

import {
	NewResourceParams,
	insertResourceSchema,
	resources,
} from "@/lib/db/schema/resources";
import { db } from "../db";
import { generateEmbeddings } from "../ai/embedding";
import { embeddings as embeddingsTable } from "../db/schema/embeddings";

export const createResource = async (input: NewResourceParams) => {
	try {
		const { content } = insertResourceSchema.parse(input);

		const [resource] = await db
			.insert(resources)
			.values({ content })
			.returning();

		const embeddings = await generateEmbeddings(content);
		await db.insert(embeddingsTable).values(
			embeddings.map((embedding) => ({
				resourceId: resource.id,
				...embedding,
			}))
		);

		return "Resource successfully created and embedded.";
	} catch (error) {
		return error instanceof Error && error.message.length > 0
			? error.message
			: "Error, please try again.";
	}
};

================
File: src/lib/ai/embedding.ts
================
import { embed, embedMany } from "ai";
import { openai } from "@ai-sdk/openai";
import { db } from "../db";
import { cosineDistance, desc, gt, sql } from "drizzle-orm";
import { embeddings } from "../db/schema/embeddings";

const embeddingModel = openai.embedding("text-embedding-ada-002");

const generateChunks = (input: string): string[] => {
	return input
		.trim()
		.split(".")
		.filter((i) => i !== "");
};

export const generateEmbeddings = async (
	value: string
): Promise<Array<{ embedding: number[]; content: string }>> => {
	const chunks = generateChunks(value);
	const { embeddings } = await embedMany({
		model: embeddingModel,
		values: chunks,
	});
	return embeddings.map((e, i) => ({ content: chunks[i], embedding: e }));
};

export const generateEmbedding = async (value: string): Promise<number[]> => {
	const input = value.replaceAll("\\n", " ");
	const { embedding } = await embed({
		model: embeddingModel,
		value: input,
	});
	return embedding;
};

export const findRelevantContent = async (userQuery: string) => {
	const userQueryEmbedded = await generateEmbedding(userQuery);
	const similarity = sql<number>`1 - (${cosineDistance(
		embeddings.embedding,
		userQueryEmbedded
	)})`;
	const similarGuides = await db
		.select({ name: embeddings.content, similarity })
		.from(embeddings)
		.where(gt(similarity, 0.5))
		.orderBy((t) => desc(t.similarity))
		.limit(4);
	return similarGuides;
};

================
File: src/lib/db/migrations/meta/_journal.json
================
{
  "version": "7",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "7",
      "when": 1719997972944,
      "tag": "0000_yielding_bloodaxe",
      "breakpoints": true
    }
  ]
}

================
File: src/lib/db/migrations/meta/0000_snapshot.json
================
{
  "id": "ab270498-0532-4efe-aac3-bb80ffc07ce2",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.resources": {
      "name": "resources",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar(191)",
          "primaryKey": true,
          "notNull": true
        },
        "content": {
          "name": "content",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {}
    }
  },
  "enums": {},
  "schemas": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}

================
File: src/lib/db/migrations/0000_yielding_bloodaxe.sql
================
CREATE EXTENSION IF NOT EXISTS vector;

CREATE TABLE IF NOT EXISTS "resources" (
	"id" varchar(191) PRIMARY KEY NOT NULL,
	"content" text NOT NULL,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL
);

================
File: src/lib/db/schema/embeddings.ts
================
import { generateId } from "ai";
import { index, pgTable, text, varchar, vector } from "drizzle-orm/pg-core";
import { resources } from "./resources";

export const embeddings = pgTable(
	"embeddings",
	{
		id: varchar("id", { length: 191 })
			.primaryKey()
			.$defaultFn(() => generateId()),
		resourceId: varchar("resource_id", { length: 191 }).references(
			() => resources.id,
			{ onDelete: "cascade" }
		),
		content: text("content").notNull(),
		embedding: vector("embedding", { dimensions: 1536 }).notNull(),
	},
	(table) => ({
		embeddingIndex: index("embeddingIndex").using(
			"hnsw",
			table.embedding.op("vector_cosine_ops")
		),
	})
);

================
File: src/lib/db/schema/resources.ts
================
import { sql } from "drizzle-orm";
import { text, varchar, timestamp, pgTable } from "drizzle-orm/pg-core";
import { createSelectSchema } from "drizzle-zod";
import { z } from "zod";

import { nanoid } from "@/lib/utils";

export const resources = pgTable("resources", {
	id: varchar("id", { length: 191 })
		.primaryKey()
		.$defaultFn(() => nanoid()),
	content: text("content").notNull(),

	createdAt: timestamp("created_at")
		.notNull()
		.default(sql`now()`),
	updatedAt: timestamp("updated_at")
		.notNull()
		.default(sql`now()`),
});

// Schema for resources - used to validate API requests
export const insertResourceSchema = createSelectSchema(resources)
	.extend({})
	.omit({
		id: true,
		createdAt: true,
		updatedAt: true,
	});

// Type for resources - used to type API request params and within Components
export type NewResourceParams = z.infer<typeof insertResourceSchema>;

================
File: src/lib/db/actions.ts
================


================
File: src/lib/db/index.ts
================
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import { env } from "@/lib/env.mjs";

const client = postgres(env.DATABASE_URL);
export const db = drizzle(client);

================
File: src/lib/db/migrate.ts
================
import { env } from "@/lib/env.mjs";

import { drizzle } from "drizzle-orm/postgres-js";
import { migrate } from "drizzle-orm/postgres-js/migrator";
import postgres from "postgres";

const runMigrate = async () => {
	if (!env.DATABASE_URL) {
		throw new Error("DATABASE_URL is not defined");
	}

	const connection = postgres(env.DATABASE_URL, { max: 1 });

	const db = drizzle(connection);

	console.log("⏳ Running migrations...");

	const start = Date.now();

	await migrate(db, { migrationsFolder: "lib/db/migrations" });

	const end = Date.now();

	console.log("✅ Migrations completed in", end - start, "ms");

	process.exit(0);
};

runMigrate().catch((err) => {
	console.error("❌ Migration failed");
	console.error(err);
	process.exit(1);
});

================
File: src/lib/env.mjs
================
import { createEnv } from "@t3-oss/env-nextjs";
import { z } from "zod";
import "dotenv/config";

export const env = createEnv({
	server: {
		NODE_ENV: z
			.enum(["development", "test", "production"])
			.default("development"),
		DATABASE_URL: z.string().min(1),
	},
	client: {
		// NEXT_PUBLIC_PUBLISHABLE_KEY: z.string().min(1),
	},
	// If you're using Next.js < 13.4.4, you'll need to specify the runtimeEnv manually
	// runtimeEnv: {
	//   DATABASE_URL: process.env.DATABASE_URL,
	//   NEXT_PUBLIC_PUBLISHABLE_KEY: process.env.NEXT_PUBLIC_PUBLISHABLE_KEY,
	// },
	// For Next.js >= 13.4.4, you only need to destructure client variables:
	experimental__runtimeEnv: {
		// NEXT_PUBLIC_PUBLISHABLE_KEY: process.env.NEXT_PUBLIC_PUBLISHABLE_KEY,
	},
});

================
File: src/lib/utils.ts
================
import { customAlphabet } from "nanoid";

import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

export const nanoid = customAlphabet("abcdefghijklmnopqrstuvwxyz0123456789");

================
File: src/types/tools.ts
================
export interface ToolResult {
	toolCallId: string;
	result: string;
}

export interface BaseToolProps<
	T extends Record<string, unknown> = Record<string, unknown>
> {
	toolInvocation: {
		toolName: string;
		toolCallId: string;
		parameters?: T;
	} & ({ state: "call" } | { state: "result"; result: string });
	addToolResult: (result: ToolResult) => void;
}

// Tool-specific result types
// export interface WeatherResult extends ToolResult {
// 	value: number;
// 	unit: "celsius" | "fahrenheit";
// 	weeklyForecast: Array<{
// 		day: string;
// 		value: number;
// 	}>;
// }

export interface Benefit {
	category: string;
	description: string;
}

export interface BenefitResult extends ToolResult {
	benefits: Benefit[];
}

export interface ConfirmationResult extends ToolResult {
	confirmed: boolean;
}

================
File: src/utils/toolRegistry.ts
================
import { BenefitTool } from "@/components/tools/BenefitTool";
import { ConfirmationTool } from "@/components/tools/ConfirmationTool";
import { PDFProcessingTool } from "@/components/tools/PDFProcessingTool";

export const toolComponents = {
	askForConfirmation: ConfirmationTool,
	processPDF: PDFProcessingTool,
	getBenefits: BenefitTool,
} as const;

export type ToolName = keyof typeof toolComponents;

================
File: .gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: drizzle.config.ts
================
import type { Config } from "drizzle-kit";
import { env } from "@/lib/env.mjs";

export default {
	schema: "./src/lib/db/schema",
	dialect: "postgresql",
	out: "./src/lib/db/migrations",
	dbCredentials: {
		url: env.DATABASE_URL,
	},
} satisfies Config;

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
	/* config options here */
	experimental: {
		serverComponentsExternalPackages: ["pdf2json"],
	},
};

export default nextConfig;

================
File: package.json
================
{
	"name": "generative-ui",
	"version": "0.1.0",
	"private": true,
	"scripts": {
		"dev": "next dev --turbopack",
		"build": "next build",
		"start": "next start",
		"lint": "next lint",
		"db:generate": "drizzle-kit generate",
		"db:migrate": "tsx src/lib/db/migrate.ts",
		"db:drop": "drizzle-kit drop",
		"db:pull": "drizzle-kit introspect",
		"db:push": "drizzle-kit push",
		"db:studio": "drizzle-kit studio",
		"db:check": "drizzle-kit check"
	},
	"dependencies": {
		"@ai-sdk/openai": "^1.0.15",
		"@radix-ui/react-dropdown-menu": "^2.1.4",
		"@radix-ui/react-scroll-area": "^1.2.2",
		"@radix-ui/react-slot": "^1.1.1",
		"@t3-oss/env-nextjs": "^0.11.1",
		"ai": "^4.0.32",
		"class-variance-authority": "^0.7.1",
		"clsx": "^2.1.1",
		"dotenv": "^16.4.5",
		"drizzle-orm": "^0.38.3",
		"drizzle-zod": "^0.6.1",
		"framer-motion": "^11.16.4",
		"lucide-react": "^0.469.0",
		"nanoid": "^5.0.7",
		"next": "15.1.4",
		"next-themes": "^0.4.4",
		"pdf2json": "^3.1.5",
		"postgres": "^3.4.5",
		"react": "^19.0.0",
		"react-dom": "^19.0.0",
		"sonner": "^1.7.1",
		"tailwind-merge": "^2.6.0",
		"tailwindcss-animate": "^1.0.7",
		"uuid": "^11.0.5",
		"zod": "^3.24.1"
	},
	"devDependencies": {
		"@eslint/eslintrc": "^3",
		"@types/node": "^20",
		"@types/pdf-parse": "^1.1.4",
		"@types/pg": "^8.11.10",
		"@types/react": "^19",
		"@types/react-dom": "^19",
		"drizzle-kit": "^0.30.1",
		"eslint": "^9",
		"eslint-config-next": "15.1.4",
		"pg": "^8.13.1",
		"postcss": "^8",
		"tailwindcss": "^3.4.1",
		"tsx": "^4.19.2",
		"typescript": "^5"
	}
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
